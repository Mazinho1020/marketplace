@push('scripts')
<!-- CSS adicional para modal e Select2 -->
<style>
    .modal.show {
        display: block !important;
        pointer-events: auto !important;
    }

    .modal-backdrop {
        background-color: rgba(0, 0, 0, 0.5);
        pointer-events: auto !important;
    }

    .modal-dialog {
        pointer-events: auto !important;
    }

    .modal-content {
        pointer-events: auto !important;
    }

    .btn-close {
        background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='m.235.694l15.07 15.07a.5.5 0 0 0 .708-.708L.943-.014a.5.5 0 0 0-.708.708z'/%3e%3cpath d='m15.735.694l-15.07 15.07a.5.5 0 0 0 .708.708L16.043.014a.5.5 0 0 0-.708-.708z'/%3e%3c/svg%3e") center/1em auto no-repeat;
        border: 0;
        border-radius: 0.375rem;
        opacity: 0.5;
        padding: 0.375rem;
        width: 1em;
        height: 1em;
    }

    .btn-close:hover {
        opacity: 0.75;
    }

    /* Estilos espec√≠ficos para Select2 no modal */
    .select2-container {
        width: 100% !important;
        display: block !important;
        z-index: 9999;
    }

    .select2-container .select2-selection--single {
        height: 38px !important;
        border: 1px solid #ced4da !important;
        border-radius: 0.375rem !important;
        display: flex !important;
        align-items: center !important;
    }

    .select2-container .select2-selection--single .select2-selection__rendered {
        line-height: 24px !important;
        padding: 0 12px !important;
        color: #495057 !important;
    }

    .select2-container .select2-selection--single .select2-selection__placeholder {
        color: #6c757d !important;
    }

    .select2-container .select2-selection--single .select2-selection__arrow {
        height: 36px !important;
        right: 10px !important;
    }

    .select2-dropdown {
        border: 1px solid #ced4da !important;
        border-radius: 0.375rem !important;
        z-index: 9999 !important;
        background: white !important;
    }

    .select2-search--dropdown {
        padding: 8px !important;
        display: block !important;
        visibility: visible !important;
    }

    .select2-search--dropdown .select2-search__field {
        border: 1px solid #ced4da !important;
        border-radius: 0.375rem !important;
        padding: 6px 12px !important;
        width: 100% !important;
        box-sizing: border-box !important;
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
    }

    /* For√ßar visibilidade do campo de busca */
    .select2-dropdown .select2-search {
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
        height: auto !important;
        overflow: visible !important;
    }

    /* Garantir que o dropdown tenha altura m√≠nima para mostrar a busca */
    .select2-dropdown {
        min-height: 60px !important;
    }

    .select2-results {
        max-height: 200px !important;
        overflow-y: auto !important;
    }

    .select2-results__option {
        padding: 8px 12px !important;
        cursor: pointer !important;
    }

    .select2-container--default .select2-results__option--highlighted[aria-selected] {
        background-color: #007bff !important;
        color: white !important;
    }

    /* Z-index para modal */
    .modal {
        z-index: 1055 !important;
    }

    .modal-backdrop {
        z-index: 1050 !important;
    }

    .select2-container--open .select2-dropdown {
        z-index: 9999 !important;
    }

    .select2-container--default .select2-search--dropdown .select2-search__field {
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        padding: 6px 12px;
    }

    /* Select original como fallback */
    #modal_produto_relacionado_id {
        width: 100%;
        height: 38px;
        padding: 6px 12px;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
    }

    /* Esconder o select original apenas quando Select2 estiver ativo */
    .select2-hidden-accessible {
        display: none !important;
    }
</style>

<script>
    // Fun√ß√£o para carregar bibliotecas dinamicamente
    function loadLibrariesIfNeeded() {
        const promises = [];

        // Carregar Select2 se necess√°rio
        if (typeof $.fn.select2 === 'undefined') {
            console.log('üì¶ Carregando Select2...');

            const select2Promise = new Promise((resolve, reject) => {
                // Carregar CSS primeiro
                const select2CSS = document.createElement('link');
                select2CSS.href = 'https://cdn.jsdelivr.net/npm/select2@4.1.0/dist/css/select2.min.css';
                select2CSS.rel = 'stylesheet';
                document.head.appendChild(select2CSS);

                // Carregar JS e aguardar conclus√£o
                const select2JS = document.createElement('script');
                select2JS.src = 'https://cdn.jsdelivr.net/npm/select2@4.1.0/dist/js/select2.min.js';
                select2JS.onload = () => {
                    setTimeout(() => {
                        if (typeof $.fn.select2 !== 'undefined') {
                            console.log('‚úÖ Select2 carregado e verificado dinamicamente');
                            resolve();
                        } else {
                            console.warn('‚ö†Ô∏è Select2 carregado mas n√£o detectado');
                            resolve();
                        }
                    }, 200);
                };
                select2JS.onerror = () => {
                    console.error('‚ùå Erro ao carregar Select2');
                    reject();
                };
                document.head.appendChild(select2JS);
            });
            promises.push(select2Promise);
        } else {
            console.log('‚úÖ Select2 j√° estava dispon√≠vel');
        }

        // Carregar SortableJS se necess√°rio
        if (typeof Sortable === 'undefined') {
            console.log('üì¶ Carregando SortableJS...');

            const sortablePromise = new Promise((resolve, reject) => {
                const sortableJS = document.createElement('script');
                sortableJS.src = 'https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js';
                sortableJS.onload = () => {
                    console.log('‚úÖ SortableJS carregado dinamicamente');
                    resolve();
                };
                sortableJS.onerror = () => {
                    console.error('‚ùå Erro ao carregar SortableJS');
                    reject();
                };
                document.head.appendChild(sortableJS);
            });
            promises.push(sortablePromise);
        } else {
            console.log('‚úÖ SortableJS j√° estava dispon√≠vel');
        }

        return Promise.all(promises);
    }

    // Fun√ß√£o para inicializar Select2
    function initializeSelect2() {
        console.log('üöÄ Iniciando configura√ß√£o do Select2...');

        const elemento = $('#modal_produto_relacionado_id');
        if (elemento.length === 0) {
            console.error('‚ùå Elemento n√£o encontrado!');
            return;
        }

        // Verificar se Select2 est√° dispon√≠vel
        if (typeof $.fn.select2 === 'undefined') {
            console.warn('‚ö†Ô∏è Select2 n√£o dispon√≠vel ainda, aguardando...');
            setTimeout(() => initializeSelect2(), 500);
            return;
        }

        // Limpar Select2 existente
        if (elemento.hasClass('select2-hidden-accessible')) {
            elemento.select2('destroy');
        }

        const modal = $('#modalNovoRelacionado');
        const buscarUrl = '{{ route("comerciantes.produtos.relacionados.buscar", $produto->id) }}';

        try {
            // Configura√ß√£o robusta do Select2
            elemento.select2({
                dropdownParent: modal,
                placeholder: 'Digite para buscar produtos...',
                allowClear: true,
                minimumInputLength: 1,
                width: '100%',
                closeOnSelect: true,
                language: {
                    inputTooShort: function() {
                        return 'Digite pelo menos 1 caractere para buscar';
                    },
                    noResults: function() {
                        return 'Nenhum produto encontrado';
                    },
                    searching: function() {
                        return 'Buscando produtos...';
                    }
                },
                ajax: {
                    url: buscarUrl,
                    dataType: 'json',
                    delay: 250,
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content'),
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    data: function(params) {
                        return {
                            q: params.term || '',
                            page: params.page || 1
                        };
                    },
                    processResults: function(data) {
                        if (data && data.results) {
                            return data;
                        } else if (Array.isArray(data)) {
                            return { results: data };
                        } else {
                            return { results: [] };
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('‚ùå Erro na busca:', error);
                        
                        if (xhr.responseText && xhr.responseText.indexOf('<!DOCTYPE') === 0) {
                            alert('‚ö†Ô∏è Sess√£o expirada! Redirecionando...');
                            setTimeout(() => {
                                window.location.href = '{{ route("comerciantes.login") }}';
                            }, 2000);
                        }
                    },
                    cache: true
                }
            });

            console.log('‚úÖ Select2 configurado com sucesso!');

            // Adicionar evento para focar no campo de busca quando abrir
            elemento.on('select2:open', function() {
                setTimeout(() => {
                    $('.select2-search__field').focus();
                }, 50);
            });

        } catch (error) {
            console.error('‚ùå Erro ao configurar Select2:', error);
            
            // Fallback: Select2 b√°sico
            try {
                elemento.select2({
                    dropdownParent: modal,
                    placeholder: 'Clique para buscar produtos...',
                    allowClear: true,
                    width: '100%'
                });
                console.log('‚úÖ Select2 b√°sico aplicado');
            } catch (fallbackError) {
                console.error('‚ùå Erro no fallback:', fallbackError);
            }
        }
    }

    // Inicializa√ß√£o do documento
    $(document).ready(function() {
        // Carregar bibliotecas necess√°rias primeiro
        loadLibrariesIfNeeded().then(() => {
            console.log('üöÄ Todas as bibliotecas carregadas, iniciando aplica√ß√£o...');
            initializeApp();
        }).catch(() => {
            console.warn('‚ö†Ô∏è Erro ao carregar algumas bibliotecas, continuando...');
            initializeApp();
        });
    });

    // Fun√ß√£o principal de inicializa√ß√£o
    function initializeApp() {
        // Debug b√°sico
        console.log('üîç Verifica√ß√£o de bibliotecas:');
        console.log('Bootstrap:', typeof bootstrap !== 'undefined' ? '‚úÖ' : '‚ùå');
        console.log('jQuery:', typeof $ !== 'undefined' ? '‚úÖ' : '‚ùå');
        console.log('Select2:', typeof $.fn.select2 !== 'undefined' ? '‚úÖ' : '‚ùå');
        console.log('Sortable:', typeof Sortable !== 'undefined' ? '‚úÖ' : '‚ùå');

        // Configura√ß√£o de modais
        $('[data-bs-toggle="modal"]').off('click').on('click', function(e) {
            const targetModal = $(this).data('bs-target');
            if (typeof bootstrap !== 'undefined' && targetModal) {
                const modalElement = document.querySelector(targetModal);
                if (modalElement) {
                    const modal = new bootstrap.Modal(modalElement);
                    modal.show();
                }
            }
        });

        // Fechar modal
        $('[data-bs-dismiss="modal"]').off('click').on('click', function(e) {
            const modal = $(this).closest('.modal');
            if (typeof bootstrap !== 'undefined') {
                const modalElement = modal[0];
                const bsModal = bootstrap.Modal.getInstance(modalElement);
                if (bsModal) {
                    bsModal.hide();
                } else {
                    const newModal = new bootstrap.Modal(modalElement);
                    newModal.hide();
                }
            }
        });

        // Inicializar Select2 quando o modal for mostrado
        $('#modalNovoRelacionado').off('shown.bs.modal').on('shown.bs.modal', function() {
            console.log('üéØ Modal mostrado, inicializando Select2...');
            setTimeout(() => {
                initializeSelect2();
            }, 200);
        });

        // Limpar Select2 quando o modal for fechado
        $('#modalNovoRelacionado').off('hidden.bs.modal').on('hidden.bs.modal', function() {
            console.log('üßπ Modal fechado, limpando Select2...');
            const elemento = $('#modal_produto_relacionado_id');
            if (elemento.hasClass('select2-hidden-accessible')) {
                elemento.select2('destroy');
            }
            elemento.val('').trigger('change');
        });

        // Sortable para reordena√ß√£o
        if (typeof Sortable !== 'undefined') {
            $('.sortable-body').each(function() {
                const tipo = $(this).closest('.sortable-table').data('tipo');
                new Sortable(this, {
                    handle: '.drag-handle',
                    animation: 150,
                    onEnd: function(evt) {
                        updateOrdem(tipo);
                    }
                });
            });
        }

        // Editar relacionamento
        $(document).on('click', '.btn-editar', function() {
            const id = $(this).data('id');
            const tipo = $(this).data('tipo');
            const ordem = $(this).data('ordem');
            const ativo = $(this).data('ativo');

            $('#edit_tipo_relacao').val(tipo);
            $('#edit_ordem').val(ordem);
            $('#edit_ativo').val(ativo ? 1 : 0);

            $('#formEditarRelacionado').attr('action',
                '{{ route("comerciantes.produtos.relacionados.update", [$produto->id, ":id"]) }}'.replace(':id', id)
            );

            if (typeof bootstrap !== 'undefined') {
                const modal = new bootstrap.Modal(document.getElementById('modalEditarRelacionado'));
                modal.show();
            }
        });

        // Atualizar ordem via input
        $('.ordem-input').on('change', function() {
            const id = $(this).data('id');
            const novaOrdem = $(this).val();
            updateOrdemIndividual(id, novaOrdem);
        });

        // Fun√ß√µes auxiliares
        function updateOrdem(tipo) {
            const relacionados = [];
            $(`.sortable-table[data-tipo="${tipo}"] tbody tr`).each(function(index) {
                relacionados.push({
                    id: $(this).data('id'),
                    ordem: index
                });
                $(this).find('.ordem-input').val(index);
            });

            $.ajax({
                url: '{{ route("comerciantes.produtos.relacionados.update-ordem", $produto->id) }}',
                method: 'POST',
                data: {
                    _token: '{{ csrf_token() }}',
                    relacionados: relacionados
                },
                success: function(response) {
                    if (response.success && typeof toastr !== 'undefined') {
                        toastr.success('Ordem atualizada com sucesso!');
                    }
                },
                error: function() {
                    if (typeof toastr !== 'undefined') {
                        toastr.error('Erro ao atualizar ordem');
                    }
                }
            });
        }

        function updateOrdemIndividual(id, ordem) {
            $.ajax({
                url: '{{ route("comerciantes.produtos.relacionados.update", [$produto->id, ":id"]) }}'.replace(':id', id),
                method: 'PUT',
                data: {
                    _token: '{{ csrf_token() }}',
                    ordem: ordem,
                    tipo_relacao: $(`tr[data-id="${id}"]`).closest('.sortable-table').data('tipo'),
                    ativo: 1
                },
                success: function(response) {
                    if (typeof toastr !== 'undefined') {
                        toastr.success('Ordem atualizada!');
                    }
                },
                error: function() {
                    if (typeof toastr !== 'undefined') {
                        toastr.error('Erro ao atualizar ordem');
                    }
                }
            });
        }
    }
</script>
@endpush
