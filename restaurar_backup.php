<?php
echo "=== RESTAURANDO BANCO DE DADOS ===\n\n";

$backupFile = 'C:\\Users\\leoma\\Downloads\\meufinanceiro completa.sql';

if (!file_exists($backupFile)) {
    echo "‚ùå Arquivo de backup n√£o encontrado: $backupFile\n";
    echo "Por favor, coloque o arquivo no diret√≥rio atual ou ajuste o caminho.\n";
    exit;
}

echo "üìÇ Arquivo de backup encontrado: " . basename($backupFile) . "\n";
echo "üìä Tamanho: " . number_format(filesize($backupFile) / 1024 / 1024, 2) . " MB\n\n";

try {
    // Configura√ß√µes do banco
    $host = '127.0.0.1';
    $database = 'meufinanceiro';
    $username = 'root';
    $password = '';

    echo "üîå Conectando ao banco...\n";
    $pdo = new PDO("mysql:host=$host;dbname=$database;charset=utf8mb4", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);

    echo "‚úÖ Conex√£o estabelecida!\n\n";

    // Desabilitar verifica√ß√µes temporariamente
    echo "‚öôÔ∏è Configurando para importa√ß√£o...\n";
    $pdo->exec("SET foreign_key_checks = 0");
    $pdo->exec("SET sql_mode = ''");
    $pdo->exec("SET autocommit = 0");

    // Ler arquivo SQL
    echo "üìñ Lendo arquivo SQL...\n";
    $sql = file_get_contents($backupFile);

    if ($sql === false) {
        throw new Exception("N√£o foi poss√≠vel ler o arquivo de backup");
    }

    echo "‚úÖ Arquivo lido com sucesso!\n";
    echo "üìè Tamanho do SQL: " . number_format(strlen($sql) / 1024, 2) . " KB\n\n";

    // Dividir em comandos individuais
    echo "üî® Executando comandos SQL...\n";

    // Remover coment√°rios e dividir por ;
    $sql = preg_replace('/--.*$/m', '', $sql);
    $sql = preg_replace('/\/\*.*?\*\//s', '', $sql);

    $commands = array_filter(
        array_map('trim', explode(';', $sql)),
        function ($cmd) {
            return !empty($cmd);
        }
    );

    echo "üìä Total de comandos: " . count($commands) . "\n";

    $executed = 0;
    $errors = 0;

    foreach ($commands as $i => $command) {
        if (empty(trim($command))) continue;

        try {
            $pdo->exec($command);
            $executed++;

            if ($executed % 100 == 0) {
                echo "‚è≥ Executados: $executed comandos...\n";
            }
        } catch (PDOException $e) {
            $errors++;

            // Mostrar apenas alguns erros para n√£o poluir
            if ($errors <= 5) {
                echo "‚ö†Ô∏è Erro no comando " . ($i + 1) . ": " . $e->getMessage() . "\n";
                echo "   SQL: " . substr($command, 0, 100) . "...\n";
            }
        }
    }

    // Finalizar transa√ß√£o
    $pdo->exec("COMMIT");
    $pdo->exec("SET foreign_key_checks = 1");

    echo "\n=== RESULTADO ===\n";
    echo "‚úÖ Comandos executados: $executed\n";
    echo "‚ö†Ô∏è Erros encontrados: $errors\n\n";

    // Verificar tabelas importantes
    echo "=== VERIFICANDO RESULTADO ===\n";

    $important_tables = [
        'empresa_usuarios' => 'Usu√°rios',
        'empresas' => 'Empresas',
        'empresa_usuario_tipos' => 'Tipos de usu√°rio',
        'fidelidade_carteiras' => 'Carteiras fidelidade'
    ];

    foreach ($important_tables as $table => $desc) {
        try {
            $stmt = $pdo->query("SELECT COUNT(*) as total FROM `$table`");
            $count = $stmt->fetch()['total'];
            echo "‚úÖ $desc ($table): $count registros\n";
        } catch (Exception $e) {
            echo "‚ùå $desc ($table): N√ÉO EXISTE\n";
        }
    }

    echo "\nüéâ RESTAURA√á√ÉO CONCLU√çDA!\n";
    echo "üëâ Agora teste o login novamente\n";
} catch (Exception $e) {
    echo "‚ùå ERRO DURANTE RESTAURA√á√ÉO: " . $e->getMessage() . "\n";
    echo "Stack trace: " . $e->getTraceAsString() . "\n";
}
