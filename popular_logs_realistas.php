<?php

require_once __DIR__ . '/vendor/autoload.php';

use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

echo "=== POPULANDO SISTEMA COM LOGS REALISTAS ===\n";

// Buscar algumas notifica√ß√µes existentes
$notificacoes = DB::table('notificacao_enviadas')->get();

// Arrays de dados realistas
$mensagensInfo = [
    'Email enviado com sucesso',
    'SMS entregue ao destinat√°rio',
    'Push notification processada',
    'Template renderizado com sucesso',
    'Webhook executado com sucesso',
    'Notifica√ß√£o in-app exibida',
    'Queue job processado',
    'Cache invalidado com sucesso'
];

$mensagensWarning = [
    'Alta lat√™ncia detectada no gateway',
    'Rate limit pr√≥ximo do limite',
    'Template depreciado em uso',
    'Conex√£o lenta com provedor',
    'Memory usage acima de 80%',
    'Disk space baixo',
    'CPU usage elevado',
    'Queue size crescendo rapidamente'
];

$mensagensError = [
    'Falha ao enviar email - SMTP timeout',
    'Token de push inv√°lido',
    'Gateway SMS retornou erro',
    'Template n√£o encontrado',
    'Database connection failed',
    'API rate limit exceeded',
    'Invalid JSON payload',
    'Authentication failed'
];

$mensagensDebug = [
    'Iniciando processamento de notifica√ß√£o',
    'Validando dados de entrada',
    'Conectando ao provedor externo',
    'Carregando template do cache',
    'Executando valida√ß√µes de neg√≥cio',
    'Preparando payload para envio',
    'Registrando m√©tricas de performance',
    'Limpando dados tempor√°rios'
];

$mensagensCritical = [
    'Servi√ßo de notifica√ß√µes indispon√≠vel',
    'Database connection pool esgotado',
    'Disk space critical (< 5%)',
    'Memory leak detectado',
    'All external providers down'
];

$componentes = ['email', 'sms', 'push', 'in_app', 'database', 'api', 'queue'];

// Gerar logs dos √∫ltimos 7 dias
for ($dia = 6; $dia >= 0; $dia--) {
    $dataBase = Carbon::now()->subDays($dia);

    // Gerar logs distribu√≠dos ao longo do dia
    for ($hora = 0; $hora < 24; $hora++) {
        $timestamp = $dataBase->copy()->addHours($hora)->addMinutes(rand(0, 59));

        // Quantidade de logs varia por hor√°rio (mais atividade durante o dia)
        $qtdLogs = $hora >= 8 && $hora <= 22 ? rand(3, 8) : rand(1, 3);

        for ($i = 0; $i < $qtdLogs; $i++) {
            $nivel = ['info', 'info', 'info', 'debug', 'debug', 'warning', 'error', 'critical'][rand(0, 7)];

            $mensagem = '';
            switch ($nivel) {
                case 'info':
                    $mensagem = $mensagensInfo[array_rand($mensagensInfo)];
                    break;
                case 'warning':
                    $mensagem = $mensagensWarning[array_rand($mensagensWarning)];
                    break;
                case 'error':
                    $mensagem = $mensagensError[array_rand($mensagensError)];
                    break;
                case 'debug':
                    $mensagem = $mensagensDebug[array_rand($mensagensDebug)];
                    break;
                case 'critical':
                    $mensagem = $mensagensCritical[array_rand($mensagensCritical)];
                    break;
            }

            $componente = $componentes[array_rand($componentes)];
            $notificacaoId = $notificacoes->count() > 0 && rand(1, 3) == 1 ? $notificacoes->random()->id : null;

            $dados = [
                'componente' => $componente,
                'ip' => '192.168.1.' . rand(100, 250),
                'user_agent' => [
                    'NotificationService/2.0',
                    'EmailProvider/1.5',
                    'SMSGateway/3.2',
                    'PushService/1.8',
                    'QueueWorker/2.1',
                    'DatabaseMonitor/1.0',
                    'APIGateway/1.3'
                ][array_rand(['NotificationService/2.0', 'EmailProvider/1.5', 'SMSGateway/3.2', 'PushService/1.8', 'QueueWorker/2.1', 'DatabaseMonitor/1.0', 'APIGateway/1.3'])],
                'response_time' => rand(50, 2000) . 'ms',
                'timestamp' => $timestamp->toISOString()
            ];

            // Adicionar dados espec√≠ficos por componente
            switch ($componente) {
                case 'email':
                    $dados['smtp_server'] = 'smtp.gmail.com';
                    $dados['message_id'] = 'msg_' . uniqid();
                    break;
                case 'sms':
                    $dados['gateway'] = ['twilio', 'nexmo', 'aws-sns'][rand(0, 2)];
                    $dados['cost'] = '$0.0075';
                    break;
                case 'push':
                    $dados['platform'] = ['android', 'ios'][rand(0, 1)];
                    $dados['token_length'] = rand(140, 180);
                    break;
                case 'database':
                    $dados['query_time'] = rand(10, 1000) . 'ms';
                    $dados['affected_rows'] = rand(1, 100);
                    break;
            }

            DB::table('notificacao_logs')->insert([
                'notificacao_id' => $notificacaoId,
                'nivel' => $nivel,
                'mensagem' => $mensagem,
                'dados' => json_encode($dados),
                'created_at' => $timestamp,
                'updated_at' => $timestamp
            ]);
        }
    }

    echo "‚úÖ Dia $dia conclu√≠do\n";
}

// Estat√≠sticas finais
$estatisticas = DB::table('notificacao_logs')
    ->select('nivel', DB::raw('COUNT(*) as total'))
    ->groupBy('nivel')
    ->get();

echo "\nüìä Estat√≠sticas finais:\n";
foreach ($estatisticas as $stat) {
    echo "- {$stat->nivel}: {$stat->total}\n";
}

$total = DB::table('notificacao_logs')->count();
echo "\nüéØ Total de logs criados: $total\n";
echo "‚úÖ Sistema de logs populado com dados realistas!\n";
