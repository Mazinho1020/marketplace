<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use App\Models\ProdutoImagem;

class LimparImagensOrfas extends Command
{
    protected $signature = 'imagens:limpar-orfas
                          {--dry-run : Executa em modo de teste sem fazer altera√ß√µes}
                          {--verbose : Mostra detalhes da opera√ß√£o}';

    protected $description = 'Remove refer√™ncias de imagens que n√£o existem mais no sistema de arquivos';

    public function handle()
    {
        $dryRun = $this->option('dry-run');
        $verbose = $this->option('verbose');

        $this->info('üîç Verificando imagens √≥rf√£s...');
        $this->newLine();

        $imagensOrfas = collect();
        $imagensOK = collect();

        // Buscar todas as imagens no banco
        $imagens = ProdutoImagem::all();

        $this->info("üìä Total de imagens no banco: {$imagens->count()}");

        $progressBar = $this->output->createProgressBar($imagens->count());
        $progressBar->start();

        foreach ($imagens as $imagem) {
            $caminhoCompleto = storage_path('app/public/produtos/' . $imagem->arquivo);

            if (!file_exists($caminhoCompleto)) {
                $imagensOrfas->push([
                    'id' => $imagem->id,
                    'arquivo' => $imagem->arquivo,
                    'produto_id' => $imagem->produto_id,
                    'principal' => $imagem->principal ? 'Sim' : 'N√£o'
                ]);

                if ($verbose) {
                    $this->newLine();
                    $this->warn("‚ùå √ìrf√£: {$imagem->arquivo} (ID: {$imagem->id})");
                }
            } else {
                $imagensOK->push($imagem);

                if ($verbose) {
                    $this->newLine();
                    $this->line("‚úÖ OK: {$imagem->arquivo}");
                }
            }

            $progressBar->advance();
        }

        $progressBar->finish();
        $this->newLine(2);

        // Relat√≥rio
        $this->info("üìà RELAT√ìRIO:");
        $this->table(
            ['Status', 'Quantidade', 'Percentual'],
            [
                ['‚úÖ Imagens OK', $imagensOK->count(), round(($imagensOK->count() / $imagens->count()) * 100, 1) . '%'],
                ['‚ùå Imagens √ìrf√£s', $imagensOrfas->count(), round(($imagensOrfas->count() / $imagens->count()) * 100, 1) . '%'],
                ['üìä Total', $imagens->count(), '100%']
            ]
        );

        if ($imagensOrfas->isNotEmpty()) {
            $this->newLine();
            $this->warn("üóëÔ∏è IMAGENS √ìRF√ÉS ENCONTRADAS:");

            $this->table(
                ['ID', 'Arquivo', 'Produto ID', 'Principal'],
                $imagensOrfas->toArray()
            );

            if (!$dryRun) {
                if ($this->confirm('Deseja remover essas refer√™ncias √≥rf√£s do banco de dados?', true)) {
                    $ids = $imagensOrfas->pluck('id');
                    $deleted = ProdutoImagem::whereIn('id', $ids)->delete();

                    $this->info("üóëÔ∏è Removidas {$deleted} refer√™ncias √≥rf√£s do banco de dados.");
                } else {
                    $this->info("‚è≠Ô∏è Opera√ß√£o cancelada pelo usu√°rio.");
                }
            } else {
                $this->info("üîç Modo dry-run: Nenhuma altera√ß√£o foi feita.");
                $this->info("   Execute sem --dry-run para remover as refer√™ncias √≥rf√£s.");
            }
        } else {
            $this->info("üéâ Nenhuma imagem √≥rf√£ encontrada! Sistema est√° consistente.");
        }

        $this->newLine();
        $this->info("‚úÖ Verifica√ß√£o conclu√≠da!");

        return 0;
    }
}
